import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.datasets import fetch_california_housing

# Load the California housing dataset
california_housing = fetch_california_housing()
X, y = california_housing.data, california_housing.target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Linear Regression with scikit-learn
linear_model = LinearRegression()
linear_model.fit(X_train_scaled, y_train)
y_pred_linear = linear_model.predict(X_test_scaled)
mse_linear = mean_squared_error(y_test, y_pred_linear)
print(f"Mean Squared Error (Linear Regression): {mse_linear:.4f}")

# Neural Network with TensorFlow/Keras
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(1)
])
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train_scaled, y_train, epochs=50, verbose=0)
y_pred_nn = model.predict(X_test_scaled).flatten()
mse_nn = mean_squared_error(y_test, y_pred_nn)
print(f"Mean Squared Error (Neural Network): {mse_nn:.4f}")

# Example Prediction
example_index = 0
example_input = X_test_scaled[example_index].reshape(1, -1)
example_true_price = y_test[example_index]
example_predicted_price_linear = linear_model.predict(example_input)[0]
example_predicted_price_nn = model.predict(example_input)[0][0]

print("\nExample Prediction:")
print(f"True House Price: ${example_true_price * 100000:.2f}")
print(f"Predicted House Price (Linear Regression): ${example_predicted_price_linear * 100000:.2f}")
print(f"Predicted House Price (Neural Network): ${example_predicted_price_nn * 100000:.2f}")
